[tool.ruff]

line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "F", "E", "I", "UP", "YTT", "ANN", "S", "BLE", "B", "A", "COM", "C4", "DTZ",
    "EM", "ISC", "G", "INP", "PIE", "T20", "Q003", "RSE", "RET", "SIM", "TID", "PTH",
    "ERA", "PD", "PLC", "PLE", "PLR", "PLW", "TRY", "NPY", "RUF", "ASYNC",
]
ignore = [
    "G002",  # erroneous issue with %-logging when logging can be confiured for % logging
    "S101",  # use of assert here is a known quantity, blame typing memes
    "PLR2004",  # Magic value comparison, may remove later
    "SIM105",  # supressable exception, I'm not paying the overhead of contextlib.supress for stylistic choices.
    "C90",  # mccabe complexity memes
    "ANN202", # implied return fine sometimes
    "ANN204",  # special method return types
    "ANN401",  # Any return
    "PLR0913", # number of function arguments
    "UP007", # "Use | For Union" doesn't account for typevar tuple unpacking.
    "COM812", # ruff format suggested
    "ISC001", # ruff format suggested
    "UP031", # printf style formatting is fine, shut up ruff
]
unfixable = [
    "ERA"  # I don't want anything erroneously detected deleted by this.
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[project]
name = "scheduler"
description = "an easy scheduler for discord.py"
readme = "README.md"
license = "MPL-2.0"
requires-python = ">=3.12"
authors = [{ name = "Michael Hall", email = "michael@michaelhall.tech" }]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
dynamic = ["version"]
dependencies = [
    "arrow>=1.2.3",
    "apsw>=3.45.1.0",
    "msgspec>=0.18.6",
    "pytz>=2024",
]


[project.urls]
Homepage = "https://github.com/mikeshardmind/discord-scheduler"

[tool.hatch.version]
path = "scheduler/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/scheduler",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
include = ["/scheduler/*"]


[tool.pyright]
include = ["scheduler"]
typeCheckingMode = "strict"
pythonVersion = "3.12"
pythonPlatform = "All"
reportCallInDefaultInitializer = "warning"
reportImplicitOverride = "warning"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"